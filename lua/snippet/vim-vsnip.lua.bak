-- nvim-cmp

-- Set completeopt to have a better completion experience
-- vim.cmd([[
-- 	set completeopt=menu,menuone,noselect
-- ]])
-- vim.o.completeopt = 'menu,menuone,noselect'
vim.o.completeopt = 'menuone,noselect'


-- Setup nvim-cmp
local nvim_lsp = require('lspconfig')
local cmp = require('cmp')
local luasnip = require('luasnip')

-- Snippets
local has_words_before = function ()
	local line, col = unpack(vim.api.nvim_win_get_cursor(0))
	return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

local feedkey = function (key, mode)
	vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)
end

cmp.setup({
	snippet = {
		expand = function (args)
			-- For `vsnip` user
			vim.fn["vsnip#anonymous"](args.body)

			-- For `luasnip` user
			-- require('luasnip').lsp_expand(args.body)
		end,
	},
	mappings = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
		['<C-d>'] = cmp.mapping.scroll_docs(-4),
		['<C-f>'] = cmp.mapping.scroll_docs(4),
		['<C-y>'] = cmp.mapping.complete(),
		['<C-e>'] = cmp.mapping.close(),
		['<CR>']  = cmp.mapping.confirm({ select = true }),
		['<Tab>'] = cmp.mapping(function(fallback)
			if cmp.visible() then
				cmp.select_next_item()
			elseif vim.fn['vsnip#available']() == 1 then
			  feedkey('<Plug>(vsnip-expand-or-jump)', '')
			elseif has_words_before() then
				cmp.complete()
			else
				-- The fallback function sends a already mapped key. In this case,
			  -- it's probably `<Tab>`.
				fallback()
			end
		end, { 'i', 's' }),
		['<S-Tab>'] = cmp.mapping(function(fallback)
			if cmp.visible() then
				cmp.select_prev_item()
			elseif vim.fn['vsnip#jumpable'](-1) == 1 then
			  feedkey('<Plug>(vsnip-jump-prev)', '')
			else
				fallback()
			end
		end, { 'i', 's' }),
	},
	sources = {
		{ name = 'nvim_lsp' },

		-- For vsnip user
		{ name = 'vsnip' },

		-- For luasnip user
		{ name = 'luasnip' },

		{ name = 'buffer' },
	}
})

-- Setup lspconfig
-- require('lspconfig')[%YOUR_LSP_SERVER%].setup {
-- 	capabilities = require('cmp_nvim_lsp').update_capabilities(
-- 		vim.lsp.protocol.make_client_capabilities()
-- 	)
-- }
local servers = { 'clangd', 'rust_analyzer', 'pyright', 'tsserver' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
		capabilities = require('cmp_nvim_lsp').update_capabilities(
			vim.lsp.protocol.make_client_capabilities()
		)
  }
end

vim.g.vsnip_snippet_dir = '/home/alanjui/.config/nvim/my-snippets'
